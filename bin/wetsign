#!/usr/bin/env python3
import argparse
import os
import random
import subprocess
import tempfile
from concurrent.futures import ProcessPoolExecutor


def parse_page_ranges(page_ranges):
    """Parse a string of page ranges into a list of individual pages."""
    pages = []
    for part in page_ranges.split(","):
        if "-" in part:
            start, end = map(int, part.split("-"))
            pages.extend(range(start, end + 1))
        else:
            pages.append(int(part))
    return pages


def process_page(args):
    split_file, output_file = args
    # Slightly rotate page, add a bit of noise
    rotation = random.choice(["-", ""]) + str(0.1 * random.randint(1, 8))
    subprocess.run(
        [
            "convert",
            "-density",
            "130",
            "-trim",
            "-flatten",
            split_file,
            "-attenuate",
            "0.2",
            "+noise",
            "Gaussian",
            "-rotate",
            rotation,
            output_file,
        ],
        check=True,
    )
    print(f"Output page {split_file} to {output_file}")


def simulate_scanned_pdf(input_file, pages: list[int] | None = None):
    base, _ = os.path.splitext(input_file)
    output_file = f"{base}_scanned.pdf"

    print(f"Processing {input_file} into {output_file}")

    with tempfile.TemporaryDirectory() as tmpdir:
        # Split PDF into specified pages
        print(f"Splitting {input_file} into specified pages")
        split_files = []
        if pages:
            for page in pages:
                split_file = f"{tmpdir}/fake-scan-split-{page:04d}.pdf"
                subprocess.run(
                    [
                        "pdfseparate",
                        "-f",
                        str(page),
                        "-l",
                        str(page),
                        input_file,
                        split_file,
                    ],
                    check=True,
                )
                split_files.append(split_file)
        else:
            # If no pages specified, split the whole document
            subprocess.run(
                ["pdfseparate", input_file, f"{tmpdir}/fake-scan-split-%04d.pdf"],
                check=True,
            )
            split_files = [
                f"{tmpdir}/{file}"
                for file in os.listdir(tmpdir)
                if file.startswith("fake-scan-split-")
            ]

        # Process each page in parallel
        with ProcessPoolExecutor() as executor:
            executor.map(
                process_page,
                [
                    (split_file, f"{split_file[:-4]}_scanned.pdf")
                    for split_file in split_files
                ],
            )

        scanned_files = [f"{split_file[:-4]}_scanned.pdf" for split_file in split_files]

        # Combine and process the scanned pages
        print("Re-combining pages and applying final touches")
        subprocess.run(
            ["convert", "-density", "130"]
            + scanned_files
            + [
                "-attenuate",
                "0.2",
                "+noise",
                "Multiplicative",
                "-sharpen",
                "0x1.0",
                "-colorspace",
                "Gray",
                "+level",
                "15%,100%",
                output_file,
            ],
            check=True,
        )

        print(f"PDF re-combined to {output_file}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Simulate scanning specific pages of a PDF file."
    )
    parser.add_argument(
        "--pages", type=str, help='Pages and ranges to process, e.g., "1,3,5-7"'
    )
    parser.add_argument("input_file", type=str, help="Input PDF file")

    args = parser.parse_args()
    pages = None
    if args.pages:
        pages = parse_page_ranges(args.pages)
    simulate_scanned_pdf(args.input_file, pages)
